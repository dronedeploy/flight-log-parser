"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
exports.INT_FIELDS = new Set([
    types_1.FlightLogHeader.AircraftBatteryCell1Voltage,
    types_1.FlightLogHeader.AircraftBatteryCell2Voltage,
    types_1.FlightLogHeader.AircraftBatteryCell3Voltage,
    types_1.FlightLogHeader.AircraftBatteryCell4Voltage,
    types_1.FlightLogHeader.AircraftBatteryCharge,
    types_1.FlightLogHeader.AircraftBatteryCurrent,
    types_1.FlightLogHeader.AircraftBatteryTemperature,
    types_1.FlightLogHeader.AircraftBatteryVoltage,
    types_1.FlightLogHeader.AircraftCameraLensFocusModeValue,
    types_1.FlightLogHeader.AircraftCameraLensFocusStatusValue,
    types_1.FlightLogHeader.AircraftCameraModeValue,
    types_1.FlightLogHeader.AircraftFlightModeValue,
    types_1.FlightLogHeader.AircraftGPSSignalValue,
    types_1.FlightLogHeader.AircraftNoFlyValue,
    types_1.FlightLogHeader.AircraftSatellites,
    types_1.FlightLogHeader.GimbalModeValue,
    types_1.FlightLogHeader.AircraftSmartGoHomeRadius,
    types_1.FlightLogHeader.AircraftSmartGoHomeCountdown,
    types_1.FlightLogHeader.AircraftVelocityX,
    types_1.FlightLogHeader.AircraftVelocityY,
    types_1.FlightLogHeader.AircraftVelocityZ,
    types_1.FlightLogHeader.RCHorizontalAccuaracy,
    types_1.FlightLogHeader.RCLatitude,
    types_1.FlightLogHeader.RCLongitude,
    types_1.FlightLogHeader.LandingGearStatusValue,
    types_1.FlightLogHeader.LandingGearModeValue,
    types_1.FlightLogHeader.RCStateValue,
    types_1.FlightLogHeader.RCLandingGearValue,
]);
exports.FLOAT_FIELDS = new Set([
    types_1.FlightLogHeader.AircraftBarometricAltitude,
    types_1.FlightLogHeader.AircraftBatteryPowerPercent,
    types_1.FlightLogHeader.AircraftCameraSDCardRemainingPercent,
    types_1.FlightLogHeader.AircraftHeading,
    types_1.FlightLogHeader.AircraftLatitude,
    types_1.FlightLogHeader.AircraftLongitude,
    types_1.FlightLogHeader.AircraftNoFlyLatitude,
    types_1.FlightLogHeader.AircraftNoFlyLongitude,
    types_1.FlightLogHeader.AircraftNoFlyRadius,
    types_1.FlightLogHeader.AircraftPitch,
    types_1.FlightLogHeader.AircraftRoll,
    types_1.FlightLogHeader.AircraftSmartGoHomeFlightReturnTime,
    types_1.FlightLogHeader.AircraftSmartGoHomeFlightTimeRemaining,
    types_1.FlightLogHeader.AircraftSmartGoHomeLandingPower,
    types_1.FlightLogHeader.AircraftSmartGoHomeLandingTime,
    types_1.FlightLogHeader.AircraftSmartGoHomeReturnPower,
    types_1.FlightLogHeader.AircraftSpeed,
    types_1.FlightLogHeader.AircraftUltrasonicAltitude,
    types_1.FlightLogHeader.DeviceToAircraftDistance,
    types_1.FlightLogHeader.ElapsedTime,
    types_1.FlightLogHeader.GimbalPitch,
    types_1.FlightLogHeader.GimbalPitchAtStop,
    types_1.FlightLogHeader.GimbalRoll,
    types_1.FlightLogHeader.GimbalRollAtStop,
    types_1.FlightLogHeader.GimbalYaw,
    types_1.FlightLogHeader.GimbalYawAtStop,
    types_1.FlightLogHeader.HomeLatitude,
    types_1.FlightLogHeader.HomeLongitude,
    types_1.FlightLogHeader.RCBatteryPercentRemaining,
    types_1.FlightLogHeader.RCLeftHorizontal,
    types_1.FlightLogHeader.RCRightHorizontal,
    types_1.FlightLogHeader.RCLeftVertical,
    types_1.FlightLogHeader.RCRightVertical,
]);
exports.BOOL_FIELDS = new Set([
    types_1.FlightLogHeader.AircraftCameraBurstCapture,
    types_1.FlightLogHeader.AircraftCameraIntervalCapture,
    types_1.FlightLogHeader.AircraftCameraLensAFAssistant,
    types_1.FlightLogHeader.AircraftCameraLensAFEnabled,
    types_1.FlightLogHeader.AircraftCameraLensAssistantWorking,
    types_1.FlightLogHeader.AircraftCameraOverheated,
    types_1.FlightLogHeader.AircraftCameraRawCapture,
    types_1.FlightLogHeader.AircraftCameraBurstCapture,
    types_1.FlightLogHeader.AircraftCameraRecording,
    types_1.FlightLogHeader.AircraftCameraSDCardExists,
    types_1.FlightLogHeader.AircraftCameraSensorError,
    types_1.FlightLogHeader.AircraftCameraSingleCapture,
    types_1.FlightLogHeader.AircraftCameraStoringPhoto,
    types_1.FlightLogHeader.AircraftFlying,
    types_1.FlightLogHeader.AircraftIMUPreheating,
    types_1.FlightLogHeader.AircraftMotorsOn,
    types_1.FlightLogHeader.AircraftSmartGoHomeRequesting,
    types_1.FlightLogHeader.AircraftUltrasonicOn,
    types_1.FlightLogHeader.AircraftVisionOn,
    types_1.FlightLogHeader.CustomRecord,
    types_1.FlightLogHeader.LandingGearIsMovable,
    types_1.FlightLogHeader.RCGoHome,
    types_1.FlightLogHeader.RCRecord,
    types_1.FlightLogHeader.RCShutter,
    types_1.FlightLogHeader.RCPlayback,
    types_1.FlightLogHeader.RCPause,
    types_1.FlightLogHeader.RCCustom1,
    types_1.FlightLogHeader.RCCustom2,
    types_1.FlightLogHeader.RCSattelites,
    types_1.FlightLogHeader.RCGSPDataIsValid,
    types_1.FlightLogHeader.RCLeftHorizontal,
    types_1.FlightLogHeader.RCRightHorizontal,
    types_1.FlightLogHeader.RCLeftVertical,
    types_1.FlightLogHeader.RCRightVertical,
    types_1.FlightLogHeader.AircraftCameraChangeableLensSupported,
    types_1.FlightLogHeader.AircraftCameraLensInstalled,
    types_1.FlightLogHeader.AircraftCameraLensMFAssistant,
]);
exports.DATE_FIELDS = new Set([
    types_1.FlightLogHeader.DateTime,
]);
//# sourceMappingURL=field-types.js.map